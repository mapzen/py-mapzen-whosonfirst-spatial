#!/usr/bin/env python
# -*-python-*-

import sys
import os.path
import logging

import mapzen.whosonfirst.utils
import mapzen.whosonfirst.spatial

if __name__ == '__main__':

    import sys
    import optparse
    import ConfigParser

    opt_parser = optparse.OptionParser()

    opt_parser.add_option('-c', '--config', dest='config', action='store', default=None, help='')
    opt_parser.add_option('-s', '--section', dest='sect', action='store', default='whosonfirst', help='')
    opt_parser.add_option('-l', '--latlong', dest='latlon', action='store_true', default=None, help='')
    opt_parser.add_option('-b', '--bbox', dest='bbox', action='store_true', default=None, help='')
    opt_parser.add_option('-p', '--placetype', dest='placetype', action='store', default=None, help='')

    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')
    options, args = opt_parser.parse_args()

    if options.verbose:	
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    cfg = ConfigParser.ConfigParser()
    cfg.read(options.config)

    dsn = mapzen.whosonfirst.spatial.cfg2dsn(cfg, 'whosonfirst')
    db = mapzen.whosonfirst.spatial.query(dsn)

    args = args[0].split(",")

    if options.latlon:

        if len(args) != 2:
            logging.error("...")
            sys.exit()

        lat, lon = map(float, args)
        
        placetype = options.placetype

        rsp = db.get_by_latlon(lat, lon, placetype=options.placetype)

    elif options.bbox:

        if len(args) != 4:
            logging.error("...")
            sys.exit()

        swlat, swlon, nelat, nelon = map(float, args)
        
        placetype = options.placetype

        rsp = db.get_by_extent(swlat, swlon, nelat, nelon, placetype=options.placetype)
    
    else:
        logging.error("Invalid query")
        sys.exit()

    for feature in rsp:
        props = feature['properties']
        # hier = props['wof:hierarchy']
        # db.inflate_hierarchies(hier)

        print "%s %s" % (props['wof:id'], props['wof:name'])

    sys.exit()
