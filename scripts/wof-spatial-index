#!/usr/bin/env python
# -*-python-*-

import sys
import os.path
import logging

import mapzen.whosonfirst.utils
import mapzen.whosonfirst.spatial

if __name__ == '__main__':

    import optparse
    import ConfigParser

    opt_parser = optparse.OptionParser()

    opt_parser.add_option('-s', '--source', dest='source', action='store', default='None', help='')
    opt_parser.add_option('-c', '--config', dest='config', action='store', default='None', help='')
    opt_parser.add_option('-S', '--section', dest='section', action='store', default='spatial', help='')
    opt_parser.add_option('-i', '--ignore', dest='ignore', action='store', default='', help='')
    opt_parser.add_option('-m', '--multi', dest='multiprocessing', action='store_true', default=False, help='')

    opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')

    options, args = opt_parser.parse_args()

    if options.verbose:	
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    if not os.path.exists(options.config):
        logging.error("Missing config file")
        sys.exit()

    cfg = ConfigParser.ConfigParser()
    cfg.read(options.config)

    dsn = mapzen.whosonfirst.spatial.cfg2dsn(cfg, options.section)
    idx = mapzen.whosonfirst.spatial.index(dsn)

    source = os.path.abspath(options.source)
    ignore = []

    if options.ignore != "":
        for id in options.ignore.split(","):
            ignore.append(int(id))

    def cb(feature):

        if len(ignore):

            props = feature['properties']
            wofid = int(props.get('wof:id'))

            if wofid in ignore:
                logging.info("WOF ID %s is in ignore list so... ignoring")
                return

        logging.debug("import feature %s" % feature.get('id', "UNKNOWN"))

        if feature.get('id', None) == 0:
            logging.warning("Skipping the Earth because PostGIS is known to be weird about antipodal hoohah")
            return

        idx.import_feature(feature)

    mapzen.whosonfirst.utils.crawl_with_callback(source, cb, inflate=True, multiprocessing=options.multiprocessing)
    sys.exit()
        
